opacity = 1
)
customJS <-
"function() {
d3.selectAll('.node text').style('fill', 'black').attr('stroke-width', '.1px').attr('stroke', '#3f3f3f');
}"
g <- htmlwidgets::onRender(p, customJS)
g
library(igraph)
library(networkD3)
library(htmlwidgets)
dataset <- read.csv("c:/Users/Usuario/Documents/I.Systems/Dados/ONA/Base de Dados - ONA Set_21 - final_dataset.csv")
Encoding(dataset[['target_name']]) <- "UTF-8"
Encoding(dataset[['source_name']]) <- "UTF-8"
dataset_1 <- dataset[dataset$source_name %in% c("Higor Augusto Gomes"), ]
dataset_2 <- dataset[dataset$target_name %in% c("Higor Augusto Gomes"), ]
dataset <- rbind(dataset_1, dataset_2)
dataset <- dataset[order(dataset$source_name), ]
nodes_1 <- unique(dataset[c('target_name', 'target_group', 'target_size')])
nodes_1 <- nodes_1[order(nodes_1$target_name), ]
row.names(nodes_1) <- NULL
colnames(nodes_1) <- c('name', 'group', 'size')
nodes_2 <- unique(dataset[c('source_name', 'source_group', 'source_size')])
nodes_2 <- nodes_2[order(nodes_2$source_name), ]
row.names(nodes_2) <- NULL
colnames(nodes_2) <- c('name', 'group', 'size')
nodes <- unique(rbind(nodes_1, nodes_2))
nodes <- nodes[order(nodes$name), ]
dicitonary <- data.frame(nodes$name, seq(0, nrow(nodes)-1))
colnames(dicitonary) <-  c("Nomes", "ID")
for (i in dataset$source_name) {
source_values <- c(source_values, dicitonary[dicitonary$Nomes == i, ]$ID)
}
for (j in dataset$target_name) {
target_values <- c(target_values, dicitonary[dicitonary$Nomes == j, ]$ID)
}
dataset$source <- source_values
dataset$target <- target_values
links <- dataset[c('source', 'target', 'value')]
View(dataset)
library(igraph)
library(networkD3)
library(htmlwidgets)
dataset <- read.csv("c:/Users/Usuario/Documents/I.Systems/Dados/ONA/Base de Dados - ONA Set_21 - final_dataset.csv")
Encoding(dataset[['target_name']]) <- "UTF-8"
Encoding(dataset[['source_name']]) <- "UTF-8"
dataset_1 <- dataset[dataset$source_name %in% c("Higor Augusto Gomes"), ]
dataset_2 <- dataset[dataset$target_name %in% c("Higor Augusto Gomes"), ]
dataset <- rbind(dataset_1, dataset_2)
dataset <- dataset[order(dataset$source_name), ]
nodes_1 <- unique(dataset[c('target_name', 'target_group', 'target_size')])
nodes_1 <- nodes_1[order(nodes_1$target_name), ]
row.names(nodes_1) <- NULL
colnames(nodes_1) <- c('name', 'group', 'size')
nodes_2 <- unique(dataset[c('source_name', 'source_group', 'source_size')])
nodes_2 <- nodes_2[order(nodes_2$source_name), ]
row.names(nodes_2) <- NULL
colnames(nodes_2) <- c('name', 'group', 'size')
nodes <- unique(rbind(nodes_1, nodes_2))
nodes <- nodes[order(nodes$name), ]
dicitonary <- data.frame(nodes$name, seq(0, nrow(nodes)-1))
colnames(dicitonary) <-  c("Nomes", "ID")
source_values <- c()
target_values <- c()
for (i in dataset$source_name) {
source_values <- c(source_values, dicitonary[dicitonary$Nomes == i, ]$ID)
}
for (j in dataset$target_name) {
target_values <- c(target_values, dicitonary[dicitonary$Nomes == j, ]$ID)
}
dataset$source <- source_values
dataset$target <- target_values
links <- dataset[c('source', 'target', 'value')]
View(dataset)
source('~/I.Systems/Códigos/Códigos/ONA/ONA.R', echo=TRUE)
source('~/I.Systems/Códigos/Códigos/ONA/ONA.R', echo=TRUE)
if (length(names_selected) < 10) {
gravity <- -2000
} else {
gravity <- -400
}
source('~/I.Systems/Códigos/Códigos/ONA/ONA.R', echo=TRUE)
source('~/I.Systems/Códigos/Códigos/ONA/ONA.R', echo=TRUE)
source('~/I.Systems/Códigos/Códigos/ONA/ONA.R', echo=TRUE)
source('~/I.Systems/Códigos/Códigos/ONA/ONA.R', echo=TRUE)
source('~/I.Systems/Códigos/Códigos/ONA/ONA.R', echo=TRUE)
source('~/I.Systems/Códigos/Códigos/ONA/ONA.R', echo=TRUE)
source('~/I.Systems/Códigos/Códigos/ONA/ONA.R', echo=TRUE)
source('~/I.Systems/Códigos/Códigos/ONA/ONA.R', echo=TRUE)
source('~/I.Systems/Códigos/Códigos/ONA/ONA.R', echo=TRUE)
source('~/I.Systems/Códigos/Códigos/ONA/ONA.R', echo=TRUE)
source('~/I.Systems/Códigos/Códigos/ONA/ONA.R', echo=TRUE)
source('~/I.Systems/Códigos/Códigos/ONA/ONA.R', echo=TRUE)
source('~/I.Systems/Códigos/Códigos/ONA/ONA.R', echo=TRUE)
source('~/I.Systems/Códigos/Códigos/ONA/ONA.R', echo=TRUE)
source('~/I.Systems/Códigos/Códigos/ONA/ONA.R', echo=TRUE)
source('~/I.Systems/Códigos/Códigos/ONA/ONA.R', echo=TRUE)
library(igraph)
library(networkD3)
library(htmlwidgets)
dataset <- read.csv("c:/Users/Usuario/Documents/I.Systems/Dados/ONA/Base de Dados - ONA Set_21 - final_dataset.csv")
Encoding(dataset[['target_name']]) <- "UTF-8"
Encoding(dataset[['source_name']]) <- "UTF-8"
names_selected <- c("Higor Augusto Gomes", "Isabela Naves de Moura")
dataset_1 <- dataset[dataset$source_name %in% names_selected, ]
dataset_2 <- dataset[dataset$target_name %in% names_selected, ]
dataset <- rbind(dataset_1, dataset_2)
dataset <- dataset[order(dataset$source_name), ]
View(dataset)
library(igraph)
library(networkD3)
library(htmlwidgets)
dataset <- read.csv("c:/Users/Usuario/Documents/I.Systems/Dados/ONA/Base de Dados - ONA Set_21 - final_dataset.csv")
Encoding(dataset[['target_name']]) <- "UTF-8"
Encoding(dataset[['source_name']]) <- "UTF-8"
names_selected <- c("Higor Augusto Gomes", "Isabela Naves de Moura")
dataset_1 <- dataset[dataset$source_name %in% names_selected, ]
dataset_2 <- dataset[dataset$target_name %in% names_selected, ]
dataset <- rbind(dataset_1, dataset_2)
dataset <- dataset[order(dataset$source_name), ]
nodes_1 <- unique(dataset[c('target_name', 'target_group', 'target_size')])
nodes_1 <- nodes_1[order(nodes_1$target_name), ]
row.names(nodes_1) <- NULL
colnames(nodes_1) <- c('name', 'group', 'size')
nodes_2 <- unique(dataset[c('source_name', 'source_group', 'source_size')])
nodes_2 <- nodes_2[order(nodes_2$source_name), ]
row.names(nodes_2) <- NULL
colnames(nodes_2) <- c('name', 'group', 'size')
nodes <- unique(rbind(nodes_1, nodes_2))
nodes <- nodes[order(nodes$name), ]
View(nodes)
source('~/I.Systems/Códigos/Códigos/ONA/ONA.R', echo=TRUE)
source('~/I.Systems/Códigos/Códigos/ONA/ONA.R', echo=TRUE)
install.packages("agricolae")
library(agricolae)
source('~/.active-rstudio-document', echo=TRUE)
tabela
source('~/.active-rstudio-document', echo=TRUE)
View(tabela)
View(resultado)
View(tabela)
bloc<-gl(5,4,label=c(paste("tecido",LETTERS[1:5]))) #5 blocos (tecidos)
bloc
bloc
bloc<-gl(5,4,label=c(paste("tecido",1:5))) #5 blocos (tecidos)
bloc
bloc<-gl(5,3,label=c(paste("T",1:5))) #5 blocos (tecidos)
bloc
trat<-rep(paste("S",1:3),5) #4 tratamentos (produtos)
trat
#____________________________________________________________________________
# entrada dos dados: 5 tipos de tecidos (blocos) e 4 tipos de produtos (trat)
#____________________________________________________________________________
dad <-c(43, 63, 55,
86, 69, 61,
98, 79, 79,
96, 81, 79,
92, 98, 91)
dad
#____________________________________________________________________________
bloc<-gl(5,3,label=c(paste("T",1:5))) #5 blocos (Trações)
bloc
#____________________________________________________________________________
trat<-rep(paste("S",1:3),5) #3 tratamentos (Organismos)
trat
#____________________________________________________________________________
tabela<-data.frame(blocos=bloc, tratamentos=factor(trat), dados=dad)
tabela
#____________________________________________________________________________
resultado<-aov(dados ~ tratamentos + blocos, tabela)
resultado
anova(resultado)
TukeyHSD(resultado)
plot(TukeyHSD(resultado))
#____________________________________________________________________________
# entrada dos dados: 5 tipos de tecidos (blocos) e 4 tipos de produtos (trat)
#____________________________________________________________________________
dad <-c(43, 63, 55,
86, 69, 61,
98, 79, 79,
96, 81, 79,
92, 98, 91)
dad
#____________________________________________________________________________
bloc<-gl(5,3,label=c(paste("T",1:5))) #5 blocos (Trações)
bloc
#____________________________________________________________________________
trat<-rep(paste("S",1:3),5) #3 tratamentos (Organismos)
trat
#____________________________________________________________________________
tabela<-data.frame(blocos=bloc, tratamentos=factor(trat), dados=dad)
tabela
#____________________________________________________________________________
resultado<-aov(dados ~ tratamentos + blocos, tabela)
resultado
anova(resultado)
TukeyHSD(resultado)
plot(TukeyHSD(resultado))
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
resultado
x<-data.frame("linha"=c("S1","S1","S1","S1","S1",
"S2","S2","S2","S2","S2",
"S3", "S3", "S3", "S3","S3",
"S4","S4","S4","S4", "S4",
"S5","S5","S5","S5", "S5"),
"coluna"=c("W1", "W2", "W3", "W4","W5",
"W1", "W2", "W3", "W4","W5",
"W1", "W2", "W3", "W4","W5",
"W1", "W2", "W3", "W4","W5",
"W1", "W2", "W3", "W4","W5"),
"tratamento"=c("A", "E", "D", "C", "B",
"B", "A", "E",. "D", "C",
"C", "B", "A", "E", "D",
"D", "C", "B", "A", "E",
"E", "D", "C", "B", "A"),
"residuos"=c(19,54,66,42,29,
21,18,68,41,28,
53,22,23,58,35,
51,42,29,17,61,
54,48,33,43,12))
view(x)
head(x)
str(x)
x$linha <- as.factor(x$linha) #tipos de carros
x$coluna <- as.factor(x$coluna) #marcas de pneus
x$tratamento <- as.factor(x$tratamento) #posicao do pneu
analise <-lm(residuos ~ linha+coluna+tratamento, x)
anova(analise)
TukeyHSD(aov(analise))
plot(TukeyHSD(aov(analise)))
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
view(x)
head(x)
str(x)
x$linha <- as.factor(x$linha) #tipos de carros
x$coluna <- as.factor(x$coluna) #marcas de pneus
x$tratamento <- as.factor(x$tratamento) #posicao do pneu
analise <-lm(residuos ~ linha+coluna+tratamento, x)
anova(analise)
TukeyHSD(aov(analise))
plot(TukeyHSD(aov(analise)))
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
shapiro.test
shapiro.test
shapiro.test
shapiro.test
bartlett.test(Dados~Voltagem)
A <- c(117,120,114,119,115)
B <- c(115,110,116,115,114)
C <- c(118,123,119,122,118)
D <- c(125,121,123,118,118)
shapiro.test(A)
A <- c(117,120,114,119,115)
B <- c(115,110,116,115,114)
C <- c(118,123,119,122,118)
D <- c(125,121,123,118,118)
shapiro.test(A)
shapiro.test(B)
shapiro.test(C)
shapiro.test(D)
Dados <- c(117,120,114,119,115,
115,110,116,115,114,
118,123,119,122,118,
125,121,123,118,118)
Voltagem <- c(rep("A",5), rep("B",5), rep("C",5), rep("D",5))
bartlett.test(Dados~Voltagem)
hist(A)
shapiro.test
shapiro.test(A)
shapiro.test(B)
shapiro.test(C)
shapiro.test(D)
# Quarto Passo: realizando o teste de Bartlett
bartlett.test(Dados~Voltagem)
setwd("~/Mestrado/Disciplinas/FT087 - Planejamento e Análise Experimental/Códigos")
# Níveis
levels <- c(-1, 1)
# Planejamento
plan <- expand.grid(levels, levels)
View(plan)
# Nomes das colunas
colnames(plan) <- c("C", "T")
plan <- rbind(plan, plan, plan)
# Nomes das colunas
colnames(plan) <- c("C", "T")
View(plan)
# Respostas
y <- c(26.6, 40.9, 11.8, 34.0,
22.0, 36.4, 15.9, 29.0,
22.8, 36.7, 14.3, 33.6)
plan$y <- y
plan
## Análise do Experimento
# Matriz do Planejamento
X <- model.matrix(-C*T, data = plan[,-3])
## Análise do Experimento
# Matriz do Planejamento
X <- model.matrix(~C*T, data = plan[,-3])
View(X)
# Efeitos
efeitos <- crossprod(X, y)
View(efeitos)
# Efeitos
efeitos <- crossprod(X, y)/(2*2^2/2)
View(efeitos)
# Coeficientes
coef <- efeitos/2
# Valores ajustados
fitted <- X%*%coef
View(fitted)
# Resíduos
resi <- y - fitted
View(resi)
# Número de ensaios (N) e de termos no modelo (r)
N <- dim(X)[1]
r <- dim(X)[2]
## Soma dos quadrados
# SS dos resíduos
SSE <- sum(resi^2)
# SS total
SST <- sum(y^2) - sum(y)^2/N
## Graus de liberdade
# Dos erros
DFE <- N - r
# Total
DFT <- N - 1
## Média dos quadrados
# Dos erros
MSE <- SSE/DFE
# Total
MST <- SST/DFT
# t calculado
t0 <- coef/sqrt(MSE/N)
View(t0)
# t crítico
t_critico <- qt(0.05, df = DFE, lower.tail = F)
to
t0
t_critico
# pvalue
pvalue <- 2*pt(abs(to), df = DFE, lower.tail = F)
# pvalue
pvalue <- 2*pt(abs(t0), df = DFE, lower.tail = F)
pvalue
# Dataframe resumo do teste t
testet <- data.frame(coef, rep(sqrt(MSE/(2*2^2)), 4), t0, pvalue)
colnames(testet) <- c("Coef", "SE_coef", "t0", "p-value")
# Coef de determinação múltipla
R2 <- 1 - SSE/SST
R2_aj <- 1 - MSE/MST
# Dataframe resumo do teste t
testet <- data.frame(coef, rep(sqrt(MSE/N), 4), t0, pvalue)
colnames(testet) <- c("Coef", "SE_coef", "t0", "p-value")
source('~/Mestrado/Disciplinas/FT087 - Planejamento e Análise Experimental/Códigos/Atividade_Avaliativa_2.R', encoding = 'UTF-8', echo=TRUE)
## Anova
# soma dos quadrados dos efeitos
SS_x <- crossprod(X[,-1], y)^2/N
# Média dos quadrados dos efeitos
MS_x <- SS_x/1
F0
# F Calculado
F0 <- MS_x/MSE
F0
# pvalor
p <- pf(F0, 1, DFE, lower.tail = F)
p
# pvalue
pvalue <- 2*pt(abs(t0), df = DFE, lower.tail = F)
pvalue
## Anova
# soma dos quadrados dos efeitos
SS_x <- crossprod(X[,-1], y)^2/N
# Média dos quadrados dos efeitos
MS_x <- SS_x/1
# F Calculado
F0 <- MS_x/MSE
F0
# pvalor
p <- pf(F0, 1, DFE, lower.tail = F)
p
# t crítico
t_critico <- qt(0.025, df = DFE, lower.tail = F)
t_critico
# pvalue
pvalue <- 2*pt(abs(t0), df = DFE, lower.tail = F)
pvalue
# t crítico
t_critico <- qt(0.05, df = DFE, lower.tail = F)
t_critico
# pvalue
pvalue <- 2*pt(abs(t0), df = DFE, lower.tail = F)
pvalue
# Dataframe resumo do teste t
testet <- data.frame(coef, rep(sqrt(MSE/N), 4), t0, pvalue)
colnames(testet) <- c("Coef", "SE_coef", "t0", "p-value")
# pvalor
p <- pf(F0, 1, DFE, lower.tail = F)
p
# Média dos quadrados dos efeitos
MS_x <- SS_x/2
# F Calculado
F0 <- MS_x/MSE
F0
# pvalor
p <- pf(F0, 1, DFE, lower.tail = F)
p
# pvalor
p <- pf(F0, 2, DFE, lower.tail = F)
p
source('~/Mestrado/Disciplinas/FT087 - Planejamento e Análise Experimental/Códigos/Atividade_Avaliativa_2.R', encoding = 'UTF-8', echo=TRUE)
source('~/Mestrado/Disciplinas/FT087 - Planejamento e Análise Experimental/Códigos/Atividade_Avaliativa_2.R', encoding = 'UTF-8', echo=TRUE)
# Tabela resumo ANOVA
Source <- c("C", "T", "CT", "Erro", "Total")
SS <- c(SS_x, SSE, SST)
DF <- c(rep(1, 5), DFE, DFT)
MS <- c(MS_x, MSE, MST)
F0 <- c(F0, NA, NA)
pvalor <- c(p, NA, NA)
ANOVA <- data.frame(SS, DF, MS, F0, pvalor)
rownames(ANOVA) <- Source
ANOVA
source('~/Mestrado/Disciplinas/FT087 - Planejamento e Análise Experimental/Códigos/Atividade_Avaliativa_2.R', encoding = 'UTF-8', echo=TRUE)
# Tabela resumo ANOVA
Source <- c("C", "T", "CT", "Erro", "Total")
SS <- c(SS_x, SSE, SST)
DF <- c(rep(1, 5), DFE, DFT)
MS <- c(MS_x, MSE, MST)
F0 <- c(F0, NA, NA)
pvalor <- c(p, NA, NA)
ANOVA <- data.frame(SS, DF, MS, F0, pvalor)
# Tabela resumo ANOVA
Source <- c("C", "T", "CT", "Erro", "Total")
SS <- c(SS_x, SSE, SST)
DF <- c(rep(1, 3), DFE, DFT)
MS <- c(MS_x, MSE, MST)
F0 <- c(F0, NA, NA)
pvalor <- c(p, NA, NA)
ANOVA <- data.frame(SS, DF, MS, F0, pvalor)
rownames(ANOVA) <- Source
ANOVA
# Tabela resumo ANOVA
Source <- c("C", "T", "CT", "Erro", "Total")
SS <- c(SS_x, SSE, SST)
DF <- c(rep(1, 3), DFE, DFT)
MS <- c(MS_x, MSE, MST)
F0 <- c(F0, NA, NA)
pvalor <- c(p, NA, NA)
ANOVA <- data.frame(SS, DF, MS, F0, pvalor)
source('~/Mestrado/Disciplinas/FT087 - Planejamento e Análise Experimental/Códigos/Atividade_Avaliativa_2.R', encoding = 'UTF-8', echo=TRUE)
## Mínimos quadrados matricial
# Multiplicando X transposta por X
t(X)%*%X
# Inversa do resultado anterior
solve(t(X)%*%X)
# Multiplicando X transposta por y
t(X)%*%y
# Obtendo os coeficientes
beta_mat <- solve(t(X)%*%X)%*%t(X)%*%y
beta_mat
# Previsão para todos os resultados experimentais
y_hay <- X%*%beta_mat
15*85
# Previsão para valores de C e T específicos
# C = 15, T = 85
x_esp <- matrix(c(1, 15, 85, 1275), nrow = 4, ncol = 1)
y_esp_hat <- t(x_esp)%*%beta_mat
y_esp_hat
# Previsão para todos os resultados experimentais
y_hay <- X%*%beta_mat
# Previsão para todos os resultados experimentais
y_hay <- X%*%beta_mat
y_hay
# Previsão para valores de C e T específicos
# C = 0, T = 0.5
x_esp <- matrix(c(1, 0, 0.5, 0), nrow = 4, ncol = 1)
y_esp_hat <- t(x_esp)%*%beta_mat
y_esp_hat
## Análise via pacote FrF2 e comando lm
# via FrF2
install.packages("FrF2")
library(FrF2)
# Planejamento
plan2 <- FrF2(nruns = 12, nfactors = 2, factor.names = c("C", "T"), randomize = F)
summary(plan2)
# Planejamento
plan2 <- FrF2(nruns = 16, nfactors = 2, factor.names = c("C", "T"), randomize = F)
summary(plan2)
# Planejamento
plan2 <- FrF2(nruns = 12, nfactors = 2, factor.names = c("C", "T"), randomize = F)
# Planejamento
plan2 <- FrF2(nruns = 4, nfactors = 2, replications = 3, factor.names = c("C", "T"), randomize = F)
summary(plan2)
# Adicionando resposta
plan2$y <- y
plan2
# Modelo linear via FrF2
lm1 <- lm(y ~ C*T, data = plan2)
summary(lm1)
# Via expand.grid e lm
lm2 <- lm(y ~ C*T, data = plan)
summary(lm1)
# ANOVA
anova1 <- aov(lm2)
summary(anova1)
View(ANOVA)
View(ANOVA)
y_hay
View(lm1)
