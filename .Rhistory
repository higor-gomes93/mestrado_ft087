# Separando os atributos numéricos
amostra$genre <- NULL
# Construindo a função que irá realizar operações em cada coluna do dataset
funcao_geral <- function(operation){
for (element in colnames(amostra)) {
# Selecionando a coluna de interesse
coluna <- amostra[element]
# Realizando a operação
operation(coluna[,])
}
}
media <- funcao_geral(mean)
media
auxiliar_vector <- c()
funcao_geral <- function(operation){
# Criando o vetor de armazenamento dos resultados
auxiliar_vector <- c()
for (element in colnames(amostra)) {
# Selecionando a coluna de interesse
coluna <- amostra[element]
# Realizando a operação
auxiliar_vector <- c(auxiliar_vector, operation(coluna[,]))
}
return(auxiliar_vector)
}
teste <- funcao_geral(mean)
teste
dados <- c(20.6, 21.1, 22.7, 22.2, 23.1, 20.9, 21.6, 21.8, 22.1, 22.9)
amplitude <- function(v) {
max(v) - min(v)
}
amplitude(dados)
source('~/Mestrado/Disciplinas/FT087 - Planejamento e Análise Experimental/Códigos/Aula_01_Atividade_2.R', encoding = 'UTF-8', echo=TRUE)
source('~/Mestrado/Disciplinas/FT087 - Planejamento e Análise Experimental/Códigos/Aula_01_Atividade_2.R', encoding = 'UTF-8', echo=TRUE)
dataframe
mediana
moda
a <- c(10,20,30,40)
a
linhas <- colnames(amostra)
# Importação do dataset
dataset_list <- read.csv(file = "c:/Users/Usuario/Documents/Estudos/Data Science e Programação/Spotify API/playlists_songs_clusters.csv")
dataset <- as.data.frame(dataset_list)
# Selecionando uma amostra aleatória de 50 observações
amostra = dataset[sample(nrow(dataset), 50), ]
# Eliminando o atributo categórico
amostra$genre <- NULL
# Construindo a função que irá realizar operações em cada coluna do dataset
funcao_geral <- function(operation){
# Criando o vetor de armazenamento dos resultados
auxiliar_vector <- c()
for (element in colnames(amostra)) {
# Selecionando a coluna de interesse
coluna <- amostra[element]
# Realizando a operação
auxiliar_vector <- c(auxiliar_vector, operation(coluna[,]))
}
return(auxiliar_vector)
}
# Construindo a função de cálculo de moda
moda <- function(v) {
uniqv <- unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
# Construindo a função de cálculo de amplitude
amplitude <- function(v) {
max(v) - min(v)
}
# Construindo a função de cálculo do erro padrão
erro_padrao <- function(v) {
desv_pad/sqrt(length(v))
}
linhas <- colnames(amostra)
# Análise de uma base de dados
# Importação do dataset
dataset_list <- read.csv(file = "c:/Users/Usuario/Documents/Estudos/Data Science e Programação/Spotify API/playlists_songs_clusters.csv")
dataset <- as.data.frame(dataset_list)
# Selecionando uma amostra aleatória de 50 observações
amostra = dataset[sample(nrow(dataset), 50), ]
# Eliminando o atributo categórico
amostra$genre <- NULL
amostra$X <- NULL
# Construindo a função que irá realizar operações em cada coluna do dataset
funcao_geral <- function(operation){
# Criando o vetor de armazenamento dos resultados
auxiliar_vector <- c()
for (element in colnames(amostra)) {
# Selecionando a coluna de interesse
coluna <- amostra[element]
# Realizando a operação
auxiliar_vector <- c(auxiliar_vector, operation(coluna[,]))
}
return(auxiliar_vector)
}
# Construindo a função de cálculo de moda
moda <- function(v) {
uniqv <- unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
# Construindo a função de cálculo de amplitude
amplitude <- function(v) {
max(v) - min(v)
}
# Construindo a função de cálculo do erro padrão
erro_padrao <- function(v) {
desv_pad/sqrt(length(v))
}
linhas <- colnames(amostra)
media <- funcao_geral(mean)
mediana <- funcao_geral(median)
moda <- funcao_geral(moda)
desv_pad <- funcao_geral(sd)
variancia <- funcao_geral(var)
err_pad <- funcao_geral(erro_padrao)
erro_padrao <- function(v) {
sd(v)/sqrt(length(v))
}
err_pad <- funcao_geral(erro_padrao)
amp <- funcao_geral(amplitude)
# Análise de uma base de dados
# Importação do dataset
dataset_list <- read.csv(file = "c:/Users/Usuario/Documents/Estudos/Data Science e Programação/Spotify API/playlists_songs_clusters.csv")
dataset <- as.data.frame(dataset_list)
# Selecionando uma amostra aleatória de 50 observações
amostra = dataset[sample(nrow(dataset), 50), ]
# Eliminando o atributo categórico
amostra$genre <- NULL
amostra$X <- NULL
# Construindo a função que irá realizar operações em cada coluna do dataset
funcao_geral <- function(operation){
# Criando o vetor de armazenamento dos resultados
auxiliar_vector <- c()
for (element in colnames(amostra)) {
# Selecionando a coluna de interesse
coluna <- amostra[element]
# Realizando a operação
auxiliar_vector <- c(auxiliar_vector, operation(coluna[,]))
}
return(auxiliar_vector)
}
# Construindo a função de cálculo de moda
moda <- function(v) {
uniqv <- unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
# Construindo a função de cálculo de amplitude
amplitude <- function(v) {
max(v) - min(v)
}
# Construindo a função de cálculo do erro padrão
erro_padrao <- function(v) {
sd(v)/sqrt(length(v))
}
# Construindo o dataset com as medidas
medidas <- c("Média", "Mediana", "Moda", "Desvio Padrão", "Variância", "Erro Padrão", "Amplitude")
linhas <- colnames(amostra)
media <- funcao_geral(mean)
mediana <- funcao_geral(median)
moda <- funcao_geral(moda)
desv_pad <- funcao_geral(sd)
variancia <- funcao_geral(var)
err_pad <- funcao_geral(erro_padrao)
amp <- funcao_geral(amplitude)
dataframe <- data.frame(linhas, media, mediana, moda, desv_pad, variancia, err_pad, amp)
dataframe
colnames(dataframe) <- medidas
dataframe
# Análise de uma base de dados
# Importação do dataset
dataset_list <- read.csv(file = "c:/Users/Usuario/Documents/Estudos/Data Science e Programação/Spotify API/playlists_songs_clusters.csv")
dataset <- as.data.frame(dataset_list)
# Selecionando uma amostra aleatória de 50 observações
amostra = dataset[sample(nrow(dataset), 50), ]
# Eliminando o atributo categórico
amostra$genre <- NULL
amostra$X <- NULL
# Construindo a função que irá realizar operações em cada coluna do dataset
funcao_geral <- function(operation){
# Criando o vetor de armazenamento dos resultados
auxiliar_vector <- c()
for (element in colnames(amostra)) {
# Selecionando a coluna de interesse
coluna <- amostra[element]
# Realizando a operação
auxiliar_vector <- c(auxiliar_vector, operation(coluna[,]))
}
return(auxiliar_vector)
}
# Construindo a função de cálculo de moda
moda <- function(v) {
uniqv <- unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
# Construindo a função de cálculo de amplitude
amplitude <- function(v) {
max(v) - min(v)
}
# Construindo a função de cálculo do erro padrão
erro_padrao <- function(v) {
sd(v)/sqrt(length(v))
}
# Construindo o dataset com as medidas
medidas <- c("Média", "Mediana", "Moda", "Desvio Padrão", "Variância", "Erro Padrão", "Amplitude")
features <- colnames(amostra)
media <- funcao_geral(mean)
mediana <- funcao_geral(median)
moda <- funcao_geral(moda)
desv_pad <- funcao_geral(sd)
variancia <- funcao_geral(var)
err_pad <- funcao_geral(erro_padrao)
amp <- funcao_geral(amplitude)
dataframe <- data.frame(linhas, media, mediana, moda, desv_pad, variancia, err_pad, amp)
colnames(dataframe) <- medidas
library(tidyr)
library(ggplot2)
# Construindo o histograma
dataframe %>% gather() %>% head()
# Construindo o histograma
dataframe %>% gather()
dataframe
# Análise de uma base de dados
# Importação das bibliotecas
library(tidyr)
library(ggplot2)
# Importação do dataset
dataset_list <- read.csv(file = "c:/Users/Usuario/Documents/Estudos/Data Science e Programação/Spotify API/playlists_songs_clusters.csv")
dataset <- as.data.frame(dataset_list)
# Selecionando uma amostra aleatória de 50 observações
amostra = dataset[sample(nrow(dataset), 50), ]
# Eliminando o atributo categórico
amostra$genre <- NULL
amostra$X <- NULL
# Construindo a função que irá realizar operações em cada coluna do dataset
funcao_geral <- function(operation){
# Criando o vetor de armazenamento dos resultados
auxiliar_vector <- c()
for (element in colnames(amostra)) {
# Selecionando a coluna de interesse
coluna <- amostra[element]
# Realizando a operação
auxiliar_vector <- c(auxiliar_vector, operation(coluna[,]))
}
return(auxiliar_vector)
}
# Construindo a função de cálculo de moda
moda <- function(v) {
uniqv <- unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
# Construindo a função de cálculo de amplitude
amplitude <- function(v) {
max(v) - min(v)
}
# Construindo a função de cálculo do erro padrão
erro_padrao <- function(v) {
sd(v)/sqrt(length(v))
}
# Construindo o dataset com as medidas
medidas <- c("Features", "Média", "Mediana", "Moda", "Desvio Padrão", "Variância", "Erro Padrão", "Amplitude")
features <- colnames(amostra)
media <- funcao_geral(mean)
mediana <- funcao_geral(median)
moda <- funcao_geral(moda)
desv_pad <- funcao_geral(sd)
variancia <- funcao_geral(var)
err_pad <- funcao_geral(erro_padrao)
amp <- funcao_geral(amplitude)
dataframe <- data.frame(linhas, media, mediana, moda, desv_pad, variancia, err_pad, amp)
colnames(dataframe) <- medidas
# Construindo o histograma
dataframe %>% gather()
ggplot(gather(dataframe), aes(value)) +
geom_histogram(bins = 20) +
facet_wrap(~key, scales = 'free_x')
dataframe %>% gather()
dataframe[2: ,] %>% gather()
ggplot(gather(dataframe), aes(value)) +
geom_histogram(bins = 20) +
facet_wrap(~key, scales = 'free_x')
dataframe[2: ,]
dataframe[c(2: ),]
dataframe[,(2:)]
dataframe[,(2: )]
dataframe[, 2:-1]
dataframe[2:]
tail(dataframe, -2)
dataframe_hist <- dataframe
dataframe_hist$Features <- NULL
dataframe_hist
dataframe
dataframe_hist
dataframe_hist %>% gather()
ggplot(gather(dataframe_hist), aes(value)) +
geom_histogram(bins = 20) +
facet_wrap(~key, scales = 'free_x')
dataframe_hist %>% gather()
ggplot(gather(dataframe_hist), aes(value)) +
geom_histogram(bins = 10) +
facet_wrap(~key, scales = 'free_x')
amostra
amostra %>% gather()
ggplot(gather(amostra), aes(value)) +
geom_histogram(bins = 10) +
facet_wrap(~key, scales = 'free_x')
install.packages(gridExtra)
install.packages('gridExtra')
library(gridExtra)
png("c:/Users/Usuario/Documents/Mestrado/Disciplinas/FT087 - Planejamento e Análise Experimental/Documentos/dataset.png", height = 50*nrow(amostra), width = 200*ncol(amostra))
grid.table(amostra)
dev.off()
png("c:/Users/Usuario/Documents/Mestrado/Disciplinas/FT087 - Planejamento e Análise Experimental/Documentos/dataset.png", height = 2*nrow(amostra), width = 2*ncol(amostra))
grid.table(amostra)
dev.off()
png("c:/Users/Usuario/Documents/Mestrado/Disciplinas/FT087 - Planejamento e Análise Experimental/Documentos/dataset.png", height = 20*nrow(amostra), width = 100*ncol(amostra))
grid.table(amostra)
dev.off()
row.names(amostra) <- NULL
amostra
png("c:/Users/Usuario/Documents/Mestrado/Disciplinas/FT087 - Planejamento e Análise Experimental/Documentos/dataset.png", height = 30*nrow(amostra), width = 80*ncol(amostra))
grid.table(amostra)
dev.off()
png("c:/Users/Usuario/Documents/Mestrado/Disciplinas/FT087 - Planejamento e Análise Experimental/Documentos/dataset.png", height = 25*nrow(amostra), width = 80*ncol(amostra))
grid.table(amostra)
dev.off()
png("c:/Users/Usuario/Documents/Mestrado/Disciplinas/FT087 - Planejamento e Análise Experimental/Documentos/dataset.png", height = 23*nrow(amostra), width = 75*ncol(amostra))
grid.table(amostra)
dev.off()
source('~/Mestrado/Disciplinas/FT087 - Planejamento e Análise Experimental/Códigos/Aula_01_Atividade_2.R', encoding = 'UTF-8', echo=TRUE)
source('~/Mestrado/Disciplinas/FT087 - Planejamento e Análise Experimental/Códigos/Aula_01_Atividade_2.R', encoding = 'UTF-8', echo=TRUE)
png("c:/Users/Usuario/Documents/Mestrado/Disciplinas/FT087 - Planejamento e Análise Experimental/Documentos/dataset_medidas.png", height = 50*nrow(dataframe), width = 120*ncol(dataframe))
grid.table(dataframe)
dev.off()
png("c:/Users/Usuario/Documents/Mestrado/Disciplinas/FT087 - Planejamento e Análise Experimental/Documentos/dataset_medidas.png", height = 50*nrow(dataframe), width = 120*ncol(dataframe))
grid.table(dataframe)
dev.off()
png("c:/Users/Usuario/Documents/Mestrado/Disciplinas/FT087 - Planejamento e Análise Experimental/Documentos/dataset_medidas.png", height = 30*nrow(dataframe), width = 100*ncol(dataframe))
grid.table(dataframe)
dev.off()
png("c:/Users/Usuario/Documents/Mestrado/Disciplinas/FT087 - Planejamento e Análise Experimental/Documentos/dataset_medidas.png", height = 30*nrow(dataframe), width = 100*ncol(dataframe))
grid.table(dataframe)
dev.off()
png("c:/Users/Usuario/Documents/Mestrado/Disciplinas/FT087 - Planejamento e Análise Experimental/Documentos/dataset_medidas.png", height = 28*nrow(dataframe), width = 100*ncol(dataframe))
grid.table(dataframe)
dev.off()
png("c:/Users/Usuario/Documents/Mestrado/Disciplinas/FT087 - Planejamento e Análise Experimental/Documentos/dataset_medidas.png", height = 25*nrow(dataframe), width = 100*ncol(dataframe))
grid.table(dataframe)
dev.off()
setwd("~/Mestrado/Disciplinas/FT087 - Planejamento e Análise Experimental/Códigos")
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
# Criando o dataset
dataset <- data.frame("Espécie Vegetal" = c("EV1", "EV2"),
"P1" = c(35, 31),
"P2" = c(19, 26),
"P3" = c(31, 39),
"P4" = c(15, 27),
"P5" = c(20, 20),
"P6" = c(30, 29),
"P7" = c(40, 45),
"P8" = c(35, 30),
"P9" = c(18, 28),
"P10" = c(33, 43),
)
# Criando o dataset
dataset <- data.frame("Espécie Vegetal" = c("EV1", "EV2"),
"P1" = c(35, 31),
"P2" = c(19, 26),
"P3" = c(31, 39),
"P4" = c(15, 27),
"P5" = c(20, 20),
"P6" = c(30, 29),
"P7" = c(40, 45),
"P8" = c(35, 30),
"P9" = c(18, 28),
"P10" = c(33, 43)
)
source('~/Mestrado/Disciplinas/FT087 - Planejamento e Análise Experimental/Códigos/Aula_02_Atividade_1.R', encoding = 'UTF-8', echo=TRUE)
source('~/Mestrado/Disciplinas/FT087 - Planejamento e Análise Experimental/Códigos/Aula_02_Atividade_1.R', encoding = 'UTF-8', echo=TRUE)
# Importação das Bibliotecas
library(ggplot2)
source('~/Mestrado/Disciplinas/FT087 - Planejamento e Análise Experimental/Códigos/Aula_02_Atividade_1.R', encoding = 'UTF-8', echo=TRUE)
source('~/Mestrado/Disciplinas/FT087 - Planejamento e Análise Experimental/Códigos/Aula_02_Atividade_1.R', encoding = 'UTF-8', echo=TRUE)
dataset
head(mtcars)
source('~/Mestrado/Disciplinas/FT087 - Planejamento e Análise Experimental/Códigos/Aula_02_Atividade_1.R', encoding = 'UTF-8', echo=TRUE)
mtcars$mpg
dataset_transposed <-as.data.frame(t(as.matrix(dataset)))
dataset_transposed
dataset
teste <- "EV1"*10
teste <- c("EV1")*10
ev1_label <- replicate(10, "EV1")
ev2_label <- replicate(10, "EV2")
dataset[1,:]
dataset[1,]
dataset[1,2:]
dataset[1,2:10]
dataset[1,2:11]
ev1_label <- replicate(10, "EV1")
ev2_label <- replicate(10, "EV2")
ev1_data <- dataset[1,2:11]
ev2_data <- dataset[2,2:11]
dataset_box <- data.frame("Espécie" = c(ev1_label, ev2_label), "Dados" = c(ev1_data, ev2_data))
dataset_box
ev1_data
ev2_data
ev1_label
ev2_label
dataset_box
ev1_label <- replicate(10, "EV1")
ev2_label <- replicate(10, "EV2")
ev1_data <- as.data.frame(t(as.matrix(dataset[1,2:11])))
ev2_data <- as.data.frame(t(as.matrix(dataset[2,2:11])))
dataset_box <- data.frame("Espécie" = c(ev1_label, ev2_label), "Dados" = c(ev1_data, ev2_data))
dataset_box
ev <- c(ev1_data, ev2_data)
ev
ev1_data <- t(as.matrix(dataset[1,2:11]))
ev1_data
ev2_data <- t(as.matrix(dataset[2,2:11]))
ev <- c(ev1_data, ev2_data)
ev
dataset_box <- data.frame("Espécie" = c(ev1_label, ev2_label), "Dados" = c(ev))
dataset_box
ggplot(dataset_box, aes(x=as.factor("Espécie"), y="Dados")) +
geom_boxplot(fill="slateblue", alpha=0.2) +
xlab("Espécies")
ggplot(dataset_box, aes(x="Espécie", y="Dados")) +
geom_boxplot(fill="slateblue", alpha=0.2) +
xlab("Espécies")
ggplot(dataset_box, aes(x="Espécie", y="Dados")) +
geom_boxplot(fill="slateblue", alpha=0.2) +
xlab("Espécies")
dataset_box
head(mtcars)
ggplot(dataset_box, aes(x=Espécie, y=Dados)) +
geom_boxplot(fill="slateblue", alpha=0.2) +
xlab("Espécies")
# Boxplots da Atividade 2
# Importação das Bibliotecas
library(ggplot2)
# Criando o dataset_1
dataset_1 <- data.frame("Espécie Vegetal" = c("EV1", "EV2"),
"P1" = c(35, 31),
"P2" = c(19, 26),
"P3" = c(31, 39),
"P4" = c(15, 27),
"P5" = c(20, 20),
"P6" = c(30, 29),
"P7" = c(40, 45),
"P8" = c(35, 30),
"P9" = c(18, 28),
"P10" = c(33, 43))
ev1_label <- replicate(10, "EV1")
ev2_label <- replicate(10, "EV2")
ev1_data <- t(as.matrix(dataset_1[1,2:11]))
ev2_data <- t(as.matrix(dataset_1[2,2:11]))
ev <- c(ev1_data, ev2_data)
dataset_box_1 <- data.frame("Espécie" = c(ev1_label, ev2_label), "Dados" = c(ev))
ggplot(dataset_box_1, aes(x=Espécie, y=Dados)) +
geom_boxplot(fill="slateblue", alpha=0.2) +
xlab("Espécies")
# Boxplots da Atividade 2
# Importação das Bibliotecas
library(ggplot2)
# Criando o dataset_1
dataset_1 <- data.frame("Espécie Vegetal" = c("EV1", "EV2"),
"P1" = c(35, 31),
"P2" = c(19, 26),
"P3" = c(31, 39),
"P4" = c(15, 27),
"P5" = c(20, 20),
"P6" = c(30, 29),
"P7" = c(40, 45),
"P8" = c(35, 30),
"P9" = c(18, 28),
"P10" = c(33, 43))
ev1_label <- replicate(10, "EV1")
ev2_label <- replicate(10, "EV2")
ev1_data <- t(as.matrix(dataset_1[1,2:11]))
ev2_data <- t(as.matrix(dataset_1[2,2:11]))
ev <- c(ev1_data, ev2_data)
dataset_box_1 <- data.frame("Espécie" = c(ev1_label, ev2_label), "Dados" = c(ev))
ggplot(dataset_box_1, aes(x=Espécie, y=Dados)) +
geom_boxplot(fill="slateblue", alpha=0.2) +
xlab("Espécies")
m1_label <- replicate(6, "M1")
m2_label <- replicate(6, "M2")
m3_label <- replicate(6, "M3")
m4_label <- replicate(6, "M4")
dataset_2 <- data.frame("Máquina" = c("M1", "M2", "M3", "M4"),
"T1" = c(8.1, 8.4, 8.8, 8.3),
"T2" = c(8.3, 8.4, 8.9, 8.2),
"T3" = c(8.0, 8.3, 8.8, 8.2),
"T4" = c(8.1, 8.4, 8.8, 8.3),
"T5" = c(8.1, 8.3, 8.8, 8.3),
"T6" = c(8.2, 8.4, 8.8, 8.3))
dataset_2
m1_label <- replicate(6, "M1")
m2_label <- replicate(6, "M2")
m3_label <- replicate(6, "M3")
m4_label <- replicate(6, "M4")
m1_data <- t(as.matrix(dataset_2[1,2:7]))
m2_data <- t(as.matrix(dataset_2[2,2:7]))
m3_data <- t(as.matrix(dataset_2[3,2:7]))
m4_data <- t(as.matrix(dataset_2[4,2:7]))
maq <- c(m1_data, m2_data, m3_data, m4_data)
dataset_box_2 <- data.frame("Máquina" = c(m1_label, m2_label, m3_label, m4_label), "Dados2" = c(ev))
dataset_box_2 <- data.frame("Máquina" = c(m1_label, m2_label, m3_label, m4_label), "Dados2" = c(maq))
dataset_box_2
ggplot(dataset_box_2, aes(x=Máquina, y=Dados2)) +
geom_boxplot(fill="slateblue", alpha=0.2) +
xlab("Máquinas")
