dicitonary[dicitonary$Nomes == "Higor Augusto Gomes"]
dicitonary[dicitonary$Nomes == "Higor Augusto Gomes", ]
dicitonary[dicitonary$Nomes == "Higor Augusto Gomes", ]$ID
library(igraph)
library(networkD3)
library(htmlwidgets)
dataset <- read.csv("c:/Users/Usuario/Documents/I.Systems/Dados/ONA/Base de Dados - ONA Set_21 - final_dataset.csv")
Encoding(dataset[['target_name']]) <- "UTF-8"
Encoding(dataset[['source_name']]) <- "UTF-8"
dataset_1 <- dataset[dataset$source_name %in% c("Higor Augusto Gomes"), ]
dataset_2 <- dataset[dataset$target_name %in% c("Higor Augusto Gomes"), ]
dataset <- rbind(dataset_1, dataset_2)
dataset <- dataset[order(dataset$source_name), ]
nodes_1 <- unique(dataset[c('target_name', 'target_group', 'target_size')])
nodes_1 <- nodes_1[order(nodes_1$target_name), ]
row.names(nodes_1) <- NULL
colnames(nodes_1) <- c('name', 'group', 'size')
nodes_2 <- unique(dataset[c('source_name', 'source_group', 'source_size')])
nodes_2 <- nodes_2[order(nodes_2$source_name), ]
row.names(nodes_2) <- NULL
colnames(nodes_2) <- c('name', 'group', 'size')
nodes <- unique(rbind(nodes_1, nodes_2))
nodes <- nodes[order(nodes$name), ]
dicitonary <- data.frame(nodes$name, seq(0, nrow(nodes)-1))
colnames(dicitonary) <-  c("Nomes", "ID")
for (i in dataset$source_name) {
source_values <- c(source_values, dicitonary[dicitonary$Nomes == i, ]$ID)
}
for (j in dataset$target_name) {
target_values <- c(target_values, dicitonary[dicitonary$Nomes == j, ]$ID)
}
dataset$source <- source_values
dataset$target <- target_values
links <- dataset[c('source', 'target', 'value')]
test <- seq(0, nrow(nodes)+1)
p <- forceNetwork(Links = links,
Nodes = nodes,
Source = 'source',
Target = 'target',
NodeID = 'name',
Group = 'group',
Value = "value",
Nodesize = 'size',
radiusCalculation = JS("d.nodesize"),
zoom = TRUE,
arrows = TRUE,
fontSize = 26,
linkWidth = JS("function(d){return d.value;}"),
linkDistance = JS("function(d){return d.value*10}"),
charge = -2000,
opacity = 1
)
customJS <-
"function() {
d3.selectAll('.node text').style('fill', 'black').attr('stroke-width', '.1px').attr('stroke', '#3f3f3f');
}"
g <- htmlwidgets::onRender(p, customJS)
g
library(igraph)
library(networkD3)
library(htmlwidgets)
dataset <- read.csv("c:/Users/Usuario/Documents/I.Systems/Dados/ONA/Base de Dados - ONA Set_21 - final_dataset.csv")
Encoding(dataset[['target_name']]) <- "UTF-8"
Encoding(dataset[['source_name']]) <- "UTF-8"
dataset_1 <- dataset[dataset$source_name %in% c("Higor Augusto Gomes"), ]
dataset_2 <- dataset[dataset$target_name %in% c("Higor Augusto Gomes"), ]
dataset <- rbind(dataset_1, dataset_2)
dataset <- dataset[order(dataset$source_name), ]
nodes_1 <- unique(dataset[c('target_name', 'target_group', 'target_size')])
nodes_1 <- nodes_1[order(nodes_1$target_name), ]
row.names(nodes_1) <- NULL
colnames(nodes_1) <- c('name', 'group', 'size')
nodes_2 <- unique(dataset[c('source_name', 'source_group', 'source_size')])
nodes_2 <- nodes_2[order(nodes_2$source_name), ]
row.names(nodes_2) <- NULL
colnames(nodes_2) <- c('name', 'group', 'size')
nodes <- unique(rbind(nodes_1, nodes_2))
nodes <- nodes[order(nodes$name), ]
dicitonary <- data.frame(nodes$name, seq(0, nrow(nodes)-1))
colnames(dicitonary) <-  c("Nomes", "ID")
for (i in dataset$source_name) {
source_values <- c(source_values, dicitonary[dicitonary$Nomes == i, ]$ID)
}
for (j in dataset$target_name) {
target_values <- c(target_values, dicitonary[dicitonary$Nomes == j, ]$ID)
}
dataset$source <- source_values
dataset$target <- target_values
links <- dataset[c('source', 'target', 'value')]
View(dataset)
library(igraph)
library(networkD3)
library(htmlwidgets)
dataset <- read.csv("c:/Users/Usuario/Documents/I.Systems/Dados/ONA/Base de Dados - ONA Set_21 - final_dataset.csv")
Encoding(dataset[['target_name']]) <- "UTF-8"
Encoding(dataset[['source_name']]) <- "UTF-8"
dataset_1 <- dataset[dataset$source_name %in% c("Higor Augusto Gomes"), ]
dataset_2 <- dataset[dataset$target_name %in% c("Higor Augusto Gomes"), ]
dataset <- rbind(dataset_1, dataset_2)
dataset <- dataset[order(dataset$source_name), ]
nodes_1 <- unique(dataset[c('target_name', 'target_group', 'target_size')])
nodes_1 <- nodes_1[order(nodes_1$target_name), ]
row.names(nodes_1) <- NULL
colnames(nodes_1) <- c('name', 'group', 'size')
nodes_2 <- unique(dataset[c('source_name', 'source_group', 'source_size')])
nodes_2 <- nodes_2[order(nodes_2$source_name), ]
row.names(nodes_2) <- NULL
colnames(nodes_2) <- c('name', 'group', 'size')
nodes <- unique(rbind(nodes_1, nodes_2))
nodes <- nodes[order(nodes$name), ]
dicitonary <- data.frame(nodes$name, seq(0, nrow(nodes)-1))
colnames(dicitonary) <-  c("Nomes", "ID")
source_values <- c()
target_values <- c()
for (i in dataset$source_name) {
source_values <- c(source_values, dicitonary[dicitonary$Nomes == i, ]$ID)
}
for (j in dataset$target_name) {
target_values <- c(target_values, dicitonary[dicitonary$Nomes == j, ]$ID)
}
dataset$source <- source_values
dataset$target <- target_values
links <- dataset[c('source', 'target', 'value')]
View(dataset)
source('~/I.Systems/Códigos/Códigos/ONA/ONA.R', echo=TRUE)
source('~/I.Systems/Códigos/Códigos/ONA/ONA.R', echo=TRUE)
if (length(names_selected) < 10) {
gravity <- -2000
} else {
gravity <- -400
}
source('~/I.Systems/Códigos/Códigos/ONA/ONA.R', echo=TRUE)
source('~/I.Systems/Códigos/Códigos/ONA/ONA.R', echo=TRUE)
source('~/I.Systems/Códigos/Códigos/ONA/ONA.R', echo=TRUE)
source('~/I.Systems/Códigos/Códigos/ONA/ONA.R', echo=TRUE)
source('~/I.Systems/Códigos/Códigos/ONA/ONA.R', echo=TRUE)
source('~/I.Systems/Códigos/Códigos/ONA/ONA.R', echo=TRUE)
source('~/I.Systems/Códigos/Códigos/ONA/ONA.R', echo=TRUE)
source('~/I.Systems/Códigos/Códigos/ONA/ONA.R', echo=TRUE)
source('~/I.Systems/Códigos/Códigos/ONA/ONA.R', echo=TRUE)
source('~/I.Systems/Códigos/Códigos/ONA/ONA.R', echo=TRUE)
source('~/I.Systems/Códigos/Códigos/ONA/ONA.R', echo=TRUE)
source('~/I.Systems/Códigos/Códigos/ONA/ONA.R', echo=TRUE)
source('~/I.Systems/Códigos/Códigos/ONA/ONA.R', echo=TRUE)
source('~/I.Systems/Códigos/Códigos/ONA/ONA.R', echo=TRUE)
source('~/I.Systems/Códigos/Códigos/ONA/ONA.R', echo=TRUE)
source('~/I.Systems/Códigos/Códigos/ONA/ONA.R', echo=TRUE)
library(igraph)
library(networkD3)
library(htmlwidgets)
dataset <- read.csv("c:/Users/Usuario/Documents/I.Systems/Dados/ONA/Base de Dados - ONA Set_21 - final_dataset.csv")
Encoding(dataset[['target_name']]) <- "UTF-8"
Encoding(dataset[['source_name']]) <- "UTF-8"
names_selected <- c("Higor Augusto Gomes", "Isabela Naves de Moura")
dataset_1 <- dataset[dataset$source_name %in% names_selected, ]
dataset_2 <- dataset[dataset$target_name %in% names_selected, ]
dataset <- rbind(dataset_1, dataset_2)
dataset <- dataset[order(dataset$source_name), ]
View(dataset)
library(igraph)
library(networkD3)
library(htmlwidgets)
dataset <- read.csv("c:/Users/Usuario/Documents/I.Systems/Dados/ONA/Base de Dados - ONA Set_21 - final_dataset.csv")
Encoding(dataset[['target_name']]) <- "UTF-8"
Encoding(dataset[['source_name']]) <- "UTF-8"
names_selected <- c("Higor Augusto Gomes", "Isabela Naves de Moura")
dataset_1 <- dataset[dataset$source_name %in% names_selected, ]
dataset_2 <- dataset[dataset$target_name %in% names_selected, ]
dataset <- rbind(dataset_1, dataset_2)
dataset <- dataset[order(dataset$source_name), ]
nodes_1 <- unique(dataset[c('target_name', 'target_group', 'target_size')])
nodes_1 <- nodes_1[order(nodes_1$target_name), ]
row.names(nodes_1) <- NULL
colnames(nodes_1) <- c('name', 'group', 'size')
nodes_2 <- unique(dataset[c('source_name', 'source_group', 'source_size')])
nodes_2 <- nodes_2[order(nodes_2$source_name), ]
row.names(nodes_2) <- NULL
colnames(nodes_2) <- c('name', 'group', 'size')
nodes <- unique(rbind(nodes_1, nodes_2))
nodes <- nodes[order(nodes$name), ]
View(nodes)
source('~/I.Systems/Códigos/Códigos/ONA/ONA.R', echo=TRUE)
source('~/I.Systems/Códigos/Códigos/ONA/ONA.R', echo=TRUE)
install.packages("agricolae")
library(agricolae)
source('~/.active-rstudio-document', echo=TRUE)
tabela
source('~/.active-rstudio-document', echo=TRUE)
View(tabela)
View(resultado)
View(tabela)
bloc<-gl(5,4,label=c(paste("tecido",LETTERS[1:5]))) #5 blocos (tecidos)
bloc
bloc
bloc<-gl(5,4,label=c(paste("tecido",1:5))) #5 blocos (tecidos)
bloc
bloc<-gl(5,3,label=c(paste("T",1:5))) #5 blocos (tecidos)
bloc
trat<-rep(paste("S",1:3),5) #4 tratamentos (produtos)
trat
#____________________________________________________________________________
# entrada dos dados: 5 tipos de tecidos (blocos) e 4 tipos de produtos (trat)
#____________________________________________________________________________
dad <-c(43, 63, 55,
86, 69, 61,
98, 79, 79,
96, 81, 79,
92, 98, 91)
dad
#____________________________________________________________________________
bloc<-gl(5,3,label=c(paste("T",1:5))) #5 blocos (Trações)
bloc
#____________________________________________________________________________
trat<-rep(paste("S",1:3),5) #3 tratamentos (Organismos)
trat
#____________________________________________________________________________
tabela<-data.frame(blocos=bloc, tratamentos=factor(trat), dados=dad)
tabela
#____________________________________________________________________________
resultado<-aov(dados ~ tratamentos + blocos, tabela)
resultado
anova(resultado)
TukeyHSD(resultado)
plot(TukeyHSD(resultado))
#____________________________________________________________________________
# entrada dos dados: 5 tipos de tecidos (blocos) e 4 tipos de produtos (trat)
#____________________________________________________________________________
dad <-c(43, 63, 55,
86, 69, 61,
98, 79, 79,
96, 81, 79,
92, 98, 91)
dad
#____________________________________________________________________________
bloc<-gl(5,3,label=c(paste("T",1:5))) #5 blocos (Trações)
bloc
#____________________________________________________________________________
trat<-rep(paste("S",1:3),5) #3 tratamentos (Organismos)
trat
#____________________________________________________________________________
tabela<-data.frame(blocos=bloc, tratamentos=factor(trat), dados=dad)
tabela
#____________________________________________________________________________
resultado<-aov(dados ~ tratamentos + blocos, tabela)
resultado
anova(resultado)
TukeyHSD(resultado)
plot(TukeyHSD(resultado))
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
resultado
x<-data.frame("linha"=c("S1","S1","S1","S1","S1",
"S2","S2","S2","S2","S2",
"S3", "S3", "S3", "S3","S3",
"S4","S4","S4","S4", "S4",
"S5","S5","S5","S5", "S5"),
"coluna"=c("W1", "W2", "W3", "W4","W5",
"W1", "W2", "W3", "W4","W5",
"W1", "W2", "W3", "W4","W5",
"W1", "W2", "W3", "W4","W5",
"W1", "W2", "W3", "W4","W5"),
"tratamento"=c("A", "E", "D", "C", "B",
"B", "A", "E",. "D", "C",
"C", "B", "A", "E", "D",
"D", "C", "B", "A", "E",
"E", "D", "C", "B", "A"),
"residuos"=c(19,54,66,42,29,
21,18,68,41,28,
53,22,23,58,35,
51,42,29,17,61,
54,48,33,43,12))
view(x)
head(x)
str(x)
x$linha <- as.factor(x$linha) #tipos de carros
x$coluna <- as.factor(x$coluna) #marcas de pneus
x$tratamento <- as.factor(x$tratamento) #posicao do pneu
analise <-lm(residuos ~ linha+coluna+tratamento, x)
anova(analise)
TukeyHSD(aov(analise))
plot(TukeyHSD(aov(analise)))
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
view(x)
head(x)
str(x)
x$linha <- as.factor(x$linha) #tipos de carros
x$coluna <- as.factor(x$coluna) #marcas de pneus
x$tratamento <- as.factor(x$tratamento) #posicao do pneu
analise <-lm(residuos ~ linha+coluna+tratamento, x)
anova(analise)
TukeyHSD(aov(analise))
plot(TukeyHSD(aov(analise)))
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
shapiro.test
shapiro.test
shapiro.test
shapiro.test
bartlett.test(Dados~Voltagem)
A <- c(117,120,114,119,115)
B <- c(115,110,116,115,114)
C <- c(118,123,119,122,118)
D <- c(125,121,123,118,118)
shapiro.test(A)
A <- c(117,120,114,119,115)
B <- c(115,110,116,115,114)
C <- c(118,123,119,122,118)
D <- c(125,121,123,118,118)
shapiro.test(A)
shapiro.test(B)
shapiro.test(C)
shapiro.test(D)
Dados <- c(117,120,114,119,115,
115,110,116,115,114,
118,123,119,122,118,
125,121,123,118,118)
Voltagem <- c(rep("A",5), rep("B",5), rep("C",5), rep("D",5))
bartlett.test(Dados~Voltagem)
hist(A)
shapiro.test
shapiro.test(A)
shapiro.test(B)
shapiro.test(C)
shapiro.test(D)
# Quarto Passo: realizando o teste de Bartlett
bartlett.test(Dados~Voltagem)
setwd("~/Mestrado/Disciplinas/FT087 - Planejamento e Análise Experimental/Códigos")
# Carregando a biblioteca
library(FrF2)
# Planejamento
plan <- FrF2(nruns = 16, nfactors = 4, factor.names = c("A", "B", "C", "D"), randomize = F)
summary(plan)
# Respostas
y <- c(45, 71, 48, 65, 68, 60, 80, 65, 43, 100, 45, 104, 75, 86, 70, 96)
# Adicionando a resposta ao planejamento
plan$y <- y
View(plan)
#--------------------------------------------------------------------------------#
## Calculando os efeitos
X <- model.matrix(~A*B*C*D, data = plan[, -5])
View(X)
efeitos <- crossprod(X,y)/(N/2)
N <- dim(X)[1]
efeitos <- crossprod(X,y)/(N/2)
View(efeitos)
install.packages("unrepx")
library(unrepx)
efeitos2 <- yates(y)
# Half normal plot
hnplot(efeitos2, half = T, method = "Length", ID = ME(efeitos2))
# Half normal plot
hnplot(efeitos2, half = T, method = "Lenth", ID = ME(efeitos2))
# Pareto PSE plot
parplot(efeitos2, method = "Lenth")
# Análise de significância dos efeitos
# Teste t via pseudo erro padrão de Lenth
eff.test(efeitos2, method = "Lenth")
#--------------------------------------------------------------------------------#
# Cálculos para fatorial não replicado via método de Lenth
s0 <- 1.5*median(abs(efeitos[-1]))
# Efeitos desprezíveis
efeitos_2.5 <- abs(efeitos) < 2.5*s0
efeitos_2.5 <- efeitos[efeitos_2.5 == TRUE]
# Pseudo erro padrão de Lenth
PSE <- 1.5*median(efeitos_2.5)
# Erro marginal simultâneo
g <- (1+.95^(1/m))/2
# Erro marginal
m <- N-1
ME <- qt(0.025, df = m/3, lower.tail = F)*PSE
# Erro marginal simultâneo
g <- (1+.95^(1/m))/2
SME <- qt(g, df = m/2)*PSE
# Data Frame efeitos
efeitos_pad <- data.frame(names(efeitos2), abs(efeitos2))
colnames(efeitos_pad) <- c("Fonte", "Efeito")
# Gráfico de efeitos padronizados
install.packages("ggpubr")
# Gráfico de efeitos padronizados
library(ggpubr)
# Gráfico de efeitos padronizados
library(ggpubr)
ggbarplot(data = efeitos_pad,
y = "Efeito",
x = "Fonte",
col = "grey50",
fill = "lightgreen",
rotate = T,
sort.val = "asc") +
theme_bw() +
geom_line(yintercept = c(ME, SME), col = "red", show.legend = T)
# Gráfico de efeitos padronizados
library(ggpubr)
ggbarplot(data = efeitos_pad,
y = "Efeito",
x = "Fonte",
col = "grey50",
fill = "lightgreen",
rotate = T,
sort.val = "asc") +
theme_bw() +
geom_hline(yintercept = c(ME, SME), col = "red", show.legend = T)
lm.completo <- lm(y ~ A*B*C*D, data = plan)
summary(lm.completo)
# t calculado
t0 <- efeitos[-1]/PSE
# Modelo de terceira ordem
lm3 <- lm(y ~.^3, data = plan)
summary(lm3)
# Modelo de segunda ordem
lm3 <- lm(y ~.^2, data = plan)
# Modelo de segunda ordem
lm2 <- lm(y ~.^2, data = plan)
summary(lm2)
# Reduzindo modelo
lm3_red <- step(lm3, direction = "backward", trace = FALSE)
summary(lm3_red)
# Anova
anova <- aov(lm3_red)
summary(anova)
# Gráfico de Interação
plot_model(lm.completo, type = "pred", terms = c("A", "B", "C", "D"))
library(FrF2)
library(sjPlot)
library(sjmisc)
library(ggplot2)
library(xfun)
theme_set(theme_sjplot())
# Gráfico de Interação
plot_model(lm.completo, type = "pred", terms = c("A", "B", "C", "D"))
# Gráfico de Interação
plot_model(lm3_red, type = "pred", terms = c("A", "B", "C", "D"))
# Gráfico de Interação
plot_model(lm2, type = "pred", terms = c("A", "B", "C", "D"))
# Gráfico de Interação
plot_model(lm.completo, type = "pred", terms = c("A", "B", "C"))
# Gráfico de Interação
plot_model(lm2, type = "pred", terms = c("A", "B", "C"))
# Gráfico de Interação
plot_model(lm3_red, type = "pred", terms = c("A", "B", "C"))
# Gráfico de Interação
plot_model(lm3_red, type = "pred", terms = c("A", "B", "C", "D"))
# Gráfico de Interação
plot_model(lm.completo, type = "pred", terms = c("A", "B", "C", "D"))
# Criando uma variável
modelo <- lm.completo
# Gráfico de Interação
plot_model(modelo, type = "pred", terms = c("A", "B", "C", "D"))
install.packages("see", dependencies = TRUE)
library(see)
# Gráfico de Interação
plot_model(modelo, type = "pred", terms = c("A", "B", "C", "D"))
# Criando uma variável
modelo <- lm3_red
# Gráfico de Interação
plot_model(modelo, type = "pred", terms = c("A", "B", "C", "D"))
par(mfrow = c(2, 3))
contour(modelo, ~A + B, image = TRUE)
contour(modelo, ~A + C, image = TRUE)
contour(modelo, ~A + D, image = TRUE)
contour(modelo, ~B + C, image = TRUE)
contour(modelo, ~B + D, image = TRUE)
contour(modelo, ~C + D, image = TRUE)
par(mfrow = c(4, 3))
contour(modelo, ~A + B, image = TRUE)
contour(modelo, ~A + C, image = TRUE)
contour(modelo, ~A + D, image = TRUE)
contour(modelo, ~B + C, image = TRUE)
contour(modelo, ~B + D, image = TRUE)
contour(modelo, ~C + D, image = TRUE)
persp(modelo, ~A + B, zlab = "Ra [um]", col = rainbow(50), contours = ("colors"))
persp(modelo, ~A + C, zlab = "Ra [um]", col = rainbow(50), contours = ("colors"))
persp(modelo, ~A + D, zlab = "Ra [um]", col = rainbow(50), contours = ("colors"))
persp(modelo, ~B + C, zlab = "Ra [um]", col = rainbow(50), contours = ("colors"))
persp(modelo, ~B + D, zlab = "Ra [um]", col = rainbow(50), contours = ("colors"))
persp(modelo, ~C + D, zlab = "Ra [um]", col = rainbow(50), contours = ("colors"))
modelo
par(mfrow = c(4, 3))
contour(modelo, ~A1 + B1, image = TRUE)
contour(modelo, ~A1 + C1, image = TRUE)
contour(modelo, ~A1 + D1, image = TRUE)
contour(modelo, ~B1 + C1, image = TRUE)
contour(modelo, ~B1 + D1, image = TRUE)
contour(modelo, ~C1 + D1, image = TRUE)
contour(modelo, ~"A1" + "B1", image = TRUE)
# Criando uma variável
modelo <- lm.completo
par(mfrow = c(4, 3))
contour(modelo, ~A + B, image = TRUE)
contour(modelo, ~A + C, image = TRUE)
contour(modelo, ~A + D, image = TRUE)
contour(modelo, ~B + C, image = TRUE)
contour(modelo, ~B + D, image = TRUE)
contour(modelo, ~C + D, image = TRUE)
persp(modelo, ~A + B, zlab = "Ra [um]", col = rainbow(50), contours = ("colors"))
persp(modelo, ~A + C, zlab = "Ra [um]", col = rainbow(50), contours = ("colors"))
persp(modelo, ~A + D, zlab = "Ra [um]", col = rainbow(50), contours = ("colors"))
persp(modelo, ~B + C, zlab = "Ra [um]", col = rainbow(50), contours = ("colors"))
persp(modelo, ~B + D, zlab = "Ra [um]", col = rainbow(50), contours = ("colors"))
persp(modelo, ~C + D, zlab = "Ra [um]", col = rainbow(50), contours = ("colors"))
lm3_red
lm.completo
source('~/Mestrado/Disciplinas/FT087 - Planejamento e Análise Experimental/Códigos/Atividade_Avaliativa_2_3b.R', encoding = 'UTF-8', echo=TRUE)
par(mfrow = c(2, 3))
contour(modelo, ~C + P, image = TRUE)
contour(modelo, ~C + V, image = TRUE)
contour(modelo, ~P + V, image = TRUE)
persp(modelo, ~C + P, zlab = "Ra [um]", col = rainbow(50), contours = ("colors"))
persp(modelo, ~C + V, zlab = "Ra [um]", col = rainbow(50), contours = ("colors"))
persp(modelo, ~P + V, zlab = "Ra [um]", col = rainbow(50), contours = ("colors"))
